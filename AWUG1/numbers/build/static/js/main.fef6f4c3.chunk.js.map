{"version":3,"sources":["components/Number.js","components/NumberList.js","App.js","serviceWorker.js","index.js"],"names":["Number","_this$props","this","props","value","click","react_default","a","createElement","onClick","className","Component","genNumber","id","shortid","generate","Math","floor","random","genRandomNumbers","size","result","i","push","NumberList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onAdd","setState","list","toConsumableArray","state","concat","onRemove","index","filter","obj","_this2","react","map","Number_Number","key","React","App","components_NumberList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAGqBA,0LACR,IAAAC,EACkBC,KAAKC,MAAtBC,EADDH,EACCG,MAAOC,EADRJ,EACQI,MACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,QAASJ,EAAOK,UAAU,UAC1BN,UALmBO,cCIpC,SAASC,IACL,MAAQ,CACJC,GAAIC,IAAQC,WACZX,MAAOY,KAAKC,MAAsB,IAAhBD,KAAKE,WAI/B,IAAMC,EAAmB,SAACC,GAEtB,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAIF,EAAME,IACtBD,EAAOE,KAAKX,KAEhB,OAAOS,GA0CIG,cAtCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAxB,KAAAsB,IACVC,EAAAC,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA5B,QAMJ6B,MAAQ,WAEJN,EAAKO,SAAS,CAEVC,KAAKP,OAAAQ,EAAA,EAAAR,CAAKD,EAAKU,MAAMF,MAAjBG,OAAA,CAAuBxB,SAXrBa,EAedY,SAAW,SAACC,GACRb,EAAKO,SAAS,CACVC,KAAMR,EAAKU,MAAMF,KAAKM,OAAO,SAACC,EAAKlB,GAAN,OAAagB,IAAUhB,OAfxDG,EAAKU,MAAQ,CACTF,KAAMd,EAAiB,MAHjBM,wEAqBL,IAAAgB,EAAAvC,KACC+B,EAAS/B,KAAKiC,MAAdF,KACN,OACI3B,EAAAC,EAAAC,cAACkC,EAAA,SAAD,KACIpC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACVuB,EAAKU,IAAI,SAACH,EAAKF,GAAN,OACNhC,EAAAC,EAAAC,cAACoC,EAAD,CAAQvC,MAAO,kBAAMoC,EAAKJ,SAASC,IAAQO,IAAKL,EAAI3B,GAAIT,MAAOoC,EAAIpC,WAG3EE,EAAAC,EAAAC,cAAA,UAAQC,QAASP,KAAK6B,OAAtB,eA/BSe,IAAMnC,WCThBoC,mLANX,OACEzC,EAAAC,EAAAC,cAACwC,EAAD,aAHYrC,aCOEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fef6f4c3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Number.css'\r\n\r\nexport default class Number extends Component {\r\n    render() {\r\n        let { value, click } = this.props;\r\n        return (\r\n            <div onClick={click} className=\"number\">\r\n                {value}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","//Before using any symbol or library we will have\r\n//to import it\r\nimport React, { Fragment } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport Number from \"./Number\";\r\n//import App from \"../App\";\r\n\r\nfunction genNumber() {\r\n    return ({\r\n        id: shortid.generate(),\r\n        value: Math.floor(Math.random() * 1000),\r\n    });\r\n}\r\n\r\nconst genRandomNumbers = (size) => {\r\n    let result = [];\r\n    for (let i = 0; i < size; i++) {\r\n        result.push(genNumber());\r\n    }\r\n    return result;\r\n}\r\n\r\nclass NumberList extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            list: genRandomNumbers(150)\r\n        }\r\n    }\r\n\r\n    onAdd = () => {\r\n        //Important to call setState\r\n        this.setState({\r\n            //The list we pass is a completely new one!\r\n            list: [...this.state.list, genNumber()]\r\n        })\r\n    }\r\n\r\n    onRemove = (index) => {\r\n        this.setState({\r\n            list: this.state.list.filter((obj, i) => (index !== i))\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { list } = this.state;\r\n        return (\r\n            <Fragment>\r\n                <div className=\"numbers\">\r\n                    {list.map((obj, index) =>\r\n                        <Number click={() => this.onRemove(index)} key={obj.id} value={obj.value} />\r\n                    )}\r\n                </div>\r\n                <button onClick={this.onAdd}>Add</button>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n// We have to export this component so that\r\n// it is seen from outside this module\r\nexport default NumberList;","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport NumberList from './components/NumberList';\n\nclass App extends Component {\n  render() {\n    return (\n      <NumberList />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}